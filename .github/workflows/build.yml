name: Build

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-natmod:
    runs-on: ubuntu-latest
    container: micropython/build-micropython-arm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      
      - name: Set up Python
        run: |
          apt-get update && apt-get install -y python3-venv
          python3 -m venv venv
          . venv/bin/activate
          pip install pyelftools
      
      - name: Build native module
        run: |
          CFLAGS="-Wno-dangling-pointer" make build
      
      - name: Upload native module
        uses: actions/upload-artifact@v4
        with:
          name: rfcore-transparent-natmod
          path: src/build/rfcore_transparent.mpy
          retention-days: 7

  build-nucleo-firmware:
    runs-on: ubuntu-latest
    container: micropython/build-micropython-arm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      
      - name: Set up Python
        run: |
          apt-get update && apt-get install -y python3-venv
          python3 -m venv venv
          . venv/bin/activate
          pip install pyelftools
      
      - name: Initialize submodules
        run: |
          cd micropython && git submodule update --init lib/stm32lib
      
      - name: Build Nucleo firmware
        run: |
          mkdir -p firmware/NUCLEO_WB55
          cd micropython/ports/stm32 && CFLAGS="-Wno-dangling-pointer" make BOARD=NUCLEO_WB55 submodules all
          cp micropython/ports/stm32/build-NUCLEO_WB55/firmware.* firmware/NUCLEO_WB55/
      
      - name: Upload Nucleo firmware
        uses: actions/upload-artifact@v4
        with:
          name: nucleo-wb55-firmware
          path: firmware/NUCLEO_WB55/
          retention-days: 7

  build-dongle-firmware:
    runs-on: ubuntu-latest
    container: micropython/build-micropython-arm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      
      - name: Set up Python
        run: |
          apt-get update && apt-get install -y python3-venv
          python3 -m venv venv
          . venv/bin/activate
          pip install pyelftools
      
      - name: Initialize submodules
        run: |
          cd micropython && git submodule update --init lib/stm32lib
      
      - name: Build USB Dongle firmware
        run: |
          mkdir -p firmware/USBDONGLE_WB55
          cd micropython/ports/stm32 && CFLAGS="-Wno-dangling-pointer" make BOARD=USBDONGLE_WB55 submodules all
          cp micropython/ports/stm32/build-USBDONGLE_WB55/firmware.* firmware/USBDONGLE_WB55/
      
      - name: Upload USB Dongle firmware
        uses: actions/upload-artifact@v4
        with:
          name: dongle-wb55-firmware
          path: firmware/USBDONGLE_WB55/
          retention-days: 7

  build-release:
    runs-on: ubuntu-latest
    needs: [build-natmod, build-nucleo-firmware, build-dongle-firmware]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Create release ZIP file
        run: |
          mkdir -p release
          cp rfcore-transparent-natmod/rfcore_transparent.mpy release/
          cp -r nucleo-wb55-firmware release/nucleo
          cp -r dongle-wb55-firmware release/dongle
          cd release
          zip -r ../stm32wb55_ble_hci_release.zip .
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: stm32wb55_ble_hci_release.zip
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}